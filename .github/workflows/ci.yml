name: fynqAI Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for maintenance checks
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
          pip install -r requirements.txt
      
      - name: Code formatting check (Black)
        run: black --check app/ tests/
      
      - name: Import sorting check (isort)
        run: isort --check-only app/ tests/
      
      - name: Linting (flake8)
        run: flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
      
      - name: Type checking (mypy)
        run: mypy app/ --ignore-missing-imports
      
      - name: Security check (bandit)
        run: bandit -r app/ -f json -o bandit-report.json || true
      
      - name: Dependency security check
        run: safety check --json --output safety-report.json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-suite: [api, ai, services, workers]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist
      
      - name: Set up test environment
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}"
          export TESTING=true
          export DATABASE_URL="sqlite+aiosqlite:///./test.db"
          export REDIS_URL="redis://localhost:6379/1"
      
      - name: Start Redis
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: 7
      
      - name: Run unit tests
        run: |
          python run_tests.py ${{ matrix.test-suite }} --verbose
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests,${{ matrix.test-suite }}
          name: ${{ matrix.test-suite }}-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: fynqai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist
      
      - name: Set up test environment
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:testpassword@localhost:5432/fynqai_test
          REDIS_URL: redis://localhost:6379/1
          TESTING: true
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}"
      
      - name: Run database migrations
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:testpassword@localhost:5432/fynqai_test
        run: |
          # Add migration commands here when available
          echo "Database migrations would run here"
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:testpassword@localhost:5432/fynqai_test
          REDIS_URL: redis://localhost:6379/1
        run: |
          python run_tests.py integration --verbose
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            htmlcov/
            test_report.html

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-xdist psutil
      
      - name: Start Redis
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: 7
      
      - name: Run performance tests
        run: |
          python run_tests.py performance --verbose --no-coverage
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-test-results
          path: |
            performance_report.html
            benchmark_results.json

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Test Docker Image
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: fynqai-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm fynqai-backend:test python -c "import app; print('‚úÖ App imports successfully')"
      
      - name: Run container security scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD:/tmp/.cache/ aquasec/trivy:latest image \
            --format table --exit-code 0 fynqai-backend:test

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [performance-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate deployment configuration
        run: |
          echo "‚úÖ All tests passed"
          echo "‚úÖ Security scans completed"
          echo "‚úÖ Docker image built successfully"
          echo "üöÄ Ready for deployment"
      
      - name: Create deployment artifact
        run: |
          echo "COMMIT_SHA=${{ github.sha }}" > deployment.env
          echo "BUILD_NUMBER=${{ github.run_number }}" >> deployment.env
          echo "TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)" >> deployment.env
      
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info
          path: deployment.env

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-scan, docker-build]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' }}
        run: |
          echo "üéâ All tests passed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
      
      - name: Notify failure
        if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' }}
        run: |
          echo "‚ùå Tests failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          exit 1
